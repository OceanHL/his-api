<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.his.api.db.mapper.UserMapper">

    <resultMap id="BaseResultMap" type="com.example.his.api.db.pojo.UserEntity">
            <id property="id" column="id" jdbcType="INTEGER"/>
            <result property="username" column="username" jdbcType="VARCHAR"/>
            <result property="password" column="password" jdbcType="VARCHAR"/>
            <result property="openId" column="open_id" jdbcType="VARCHAR"/>
            <result property="photo" column="photo" jdbcType="VARCHAR"/>
            <result property="name" column="name" jdbcType="VARCHAR"/>
            <result property="sex" column="sex" jdbcType="OTHER"/>
            <result property="tel" column="tel" jdbcType="CHAR"/>
            <result property="email" column="email" jdbcType="VARCHAR"/>
            <result property="hiredate" column="hiredate" jdbcType="DATE"/>
            <result property="role" column="role" jdbcType="OTHER"/>
            <result property="root" column="root" jdbcType="TINYINT"/>
            <result property="deptId" column="dept_id" jdbcType="INTEGER"/>
            <result property="status" column="status" jdbcType="TINYINT"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,username,password,
        open_id,photo,name,
        sex,tel,email,
        hiredate,role,root,
        dept_id,status,create_time
    </sql>

    <!-- 通过用户id查询用户权限json列表 -->
    <select id="searchUserPermissions" parameterType="int" resultType="String">
        -- DISTINCT 用于去除重复数据
        SELECT DISTINCT p.permission_name
        FROM tb_user u
                 JOIN tb_role r ON JSON_CONTAINS(u.role, CAST(r.id AS CHAR))
                 JOIN tb_permission p ON JSON_CONTAINS(r.permissions, CAST(p.id AS CHAR))
        WHERE u.id = #{userId} AND u.status = 1
    </select>

    <!--
        登陆系统查询
        1. parameterType类型为Map，是因为Form对象利用工具方法只能转换为Map
        2. resultType类型为Integer，是因为有可能返回null，而int无法保存空值
    -->
    <select id="login" parameterType="Map" resultType="Integer">
        SELECT id
        FROM tb_user
        WHERE username = #{username}
          AND password = #{password}
        LIMIT 1 -- 查询到1条匹配的数据后，就不用再去搜索后续数据了，减少SQL语句执行时间
    </select>

    <!-- 通过id查询username -->
    <select id="searchUsernameById" parameterType="int" resultType="String">
        SELECT username
        FROM tb_user
        WHERE id = #{userId}
    </select>

    <!--更新密码-->
    <update id="updatePassword" parameterType="Map">
            UPDATE tb_user
            SET password = #{newPassword}
            WHERE id = #{userId}
            AND password = #{password} -- 旧密码
    </update>

    <!-- 分页查询用户信息 -->
    <select id="searchByPage" parameterType="Map" resultType="HashMap">
        /*!mycat: sql=
        SELECT DISTINCT u.id,
               u.name,
               u.sex,
               u.tel,
               u.email,
               d.dept_name AS dept, -- 部门名称
               u.hiredate,
               u.root,
               u.status,
               (
                    SELECT GROUP_CONCAT(role_name SEPARATOR '、')
                    FROM tb_role
                    WHERE JSON_CONTAINS(u.role, CONVERT(id, CHAR))
               ) AS roles -- 角色名称
        FROM tb_user u
        JOIN tb_role r ON JSON_CONTAINS(u.role, CONVERT(r.id, CHAR))
        LEFT JOIN tb_dept d ON u.dept_id = d.id -- 通过部门id查询部门名称，进行左连接
        WHERE 1=1
            <if test="name != null">
                AND u.name LIKE "%${name}%"
            </if>
            <if test="sex != null">
                AND u.sex = #{sex}
            </if>
            <if test="role != null">
                AND r.role_name = #{role}
            </if>
            <if test="deptId != null">
                AND d.id = #{deptId}
            </if>
            <if test="status != null">
                AND u.status = #{status}
            </if>
        ORDER BY u.id ASC -- 对u.id字段进行升序
        LIMIT #{start}, #{length} -- 分页查询，从 start 开始，查询 length 条
        */
        SELECT DISTINCT u.id,
               u.name,
               u.sex,
               u.tel,
               u.email,
               d.dept_name AS dept, -- 部门名称
               u.hiredate,
               u.root,
               u.status,
               (
                   SELECT GROUP_CONCAT(role_name SEPARATOR '、')
                   FROM tb_role
                   WHERE JSON_CONTAINS(u.role, CONVERT(id, CHAR))
               ) AS roles -- 角色名称
        FROM tb_user u
        JOIN tb_role r ON JSON_CONTAINS(u.role, CONVERT(r.id, CHAR))
        LEFT JOIN tb_dept d ON u.dept_id = d.id -- 通过部门id查询部门名称，进行左连接
        <where>
            <if test="name != null">
                AND u.name LIKE "%${name}%"
            </if>
            <if test="sex != null">
                AND u.sex = #{sex}
            </if>
            <if test="role != null">
                AND r.role_name = #{role}
            </if>
            <if test="deptId != null">
                AND d.id = #{deptId}
            </if>
            <if test="status != null">
                AND u.status = #{status}
            </if>
        </where>
        ORDER BY u.id ASC -- 对u.id字段进行升序
        LIMIT #{start}, #{length} -- 分页查询，从 start 开始，查询 length 条
    </select>

    <!-- 查询用户数量 -->
    <select id="searchCount" parameterType="Map" resultType="long">
        SELECT COUNT(1)
        FROM (
            SELECT DISTINCT u.id
            FROM tb_user u
            JOIN tb_role r ON JSON_CONTAINS(u.role, CONVERT(r.id, CHAR))
            <where>
                <if test="name != null">AND u.name LIKE "%${name}%"
                </if>
                <if test="sex != null">
                    AND u.sex = #{sex}
                </if>
                <if test="role != null">
                    AND r.role_name = #{role}
                </if>
                <if test="deptId != null">
                    AND u.dept_id = #{deptId}
                </if>
                <if test="status != null">
                    AND u.status = #{status}
                </if>
            </where>
        ) AS temp
    </select>

    <!--通过userId查询用户数据-->
    <select id="searchById" parameterType="int" resultType="HashMap">
        SELECT id, username, name, sex, tel, email, hiredate, role, dept_id AS deptId, status
        FROM tb_user
        WHERE id = #{userId}
    </select>

    <!-- 插入用户数据 -->
    <insert id="insert" parameterType="com.example.his.api.db.pojo.UserEntity">
        INSERT INTO tb_user
        SET username = #{username},
            password = #{password},
            <if test="openId != null"> -- open_id 字段是给【小程序】和【APP】用的
                open_id = #{openId},
            </if>
            <if test="photo != null">
                photo = #{photo},
            </if>
            name = #{name},
            sex = #{sex},
            tel = #{tel},
            email = #{email},
            hiredate = #{hiredate},
            role = #{role},
            root = false, -- 默认都是非 root 用户
            <if test="deptId != null">
                dept_id = #{deptId},
            </if>
            status = #{status},
            create_time = NOW()
    </insert>

    <!-- 通过userId更新用户信息 -->
    <update id="update" parameterType="Map">
        UPDATE tb_user
        SET username = #{username},
            name = #{name},
            sex = #{sex},
            tel = #{tel},
            email = #{email},
            hiredate = #{hiredate},
            role = #{role},
            dept_id = #{deptId}
        WHERE id = #{userId}
    </update>
</mapper>
