spring:
  application:
    name: his-api
  servlet:
    # 文件上传功能
    multipart:
      enabled: true # 开启文件上传功能
      max-file-size: 20MB # 单个文件的最大体积【不能超过20MB】
      max-request-size: 20MB # HTTP整个请求体积最大【不能超过20MB】
  # druid数据库（mysql）连接池配置
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource		# Druid连接池！
    url: jdbc:mysql://localhost:8066/his?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai # 数据库连接地址
    driver-class-name: com.mysql.cj.jdbc.Driver # 数据库驱动
    username: root
    password: abc123456
    druid:
      initial-size: 8 # 初始的连接池数量（建议：CPU内核的1-2倍）
      max-active: 16 # 最大连接数（建议：初始连接数的1倍）
      min-idle: 8 # 最小冗余连接数（建议：与初始连接数保持一致）
      max-wait: 60000 # 最大等待连接的空闲时间
      test-while-idle: true # 让数据库连接池时不时去监测空闲连接对象是否有效，若无效则销毁
      test-on-borrow: true # 监测连接是否有效
      test-on-return: false # 监测归还的连接对象是否有效（使用时监测就行，归还时可不进行监测）
      validation-query: SELECT 1 # 用于监测是否有效的SQL语句，可以自己规定
  # 配置mongodb
  data:
    mongodb:
      host: localhost
      port: 27017
      database: his # 逻辑库名
      # admin 是 MongoDB 用于验证用户身份的逻辑库
      authentication-database: admin
      username: admin
      password: abc123456
    # redis配置
    redis:
      database: 0
      host: localhost
      port: 6379
      password: abc123456
      timeout: 10s # 读取超时时间
      jedis:
        # redis连接池配置
        pool:
          max-active: 1000 # 连接超时的最大时间
          max-wait: -1ms # 等待空闲连接对象的最大等待时间（负数代表一直等待）
          max-idle: 16
          min-idle: 8
  # rabbitmq 消息队列配置
  rabbitmq:
    host: localhost
    port: 5672
    username: admin
    password: abc123456
  # SpringCache 二级缓存
  cache:
    redis:
      time-to-live: 2592000000
    type: redis

# 服务器配置
server:
  jetty:
    threads: # 线程池配置
      acceptors: 4 # acceptors线程池，用于接受http请求的线程数【内核个数的1到2倍】
      selectors: 8 # selectors线程池处理HTTP数据包的线程数【设置为 acceptors 的2两倍】
      # worker 线程池负责调用web方法
      min: 8 # 最少线程数
      max: 200 # 最大线程数
  port: 7700 # jetty启动的端口号
  servlet:
    context-path: /his-api # web服务的相对路径
  # 配置https
  ssl:
    enabled: true # 开启https协议
    key-store-type: PKCS12 # 数字证书格式
    key-store: classpath:keystore.p12 # 数字证书文件
    key-store-password: abc123456 # 访问数字证书时的口令密码
    key-alias: jetty # 给这个数字证书起一个别名为 jetty

# mybatis 配置
mybatis:
  mapper-locations: classpath:mapper/*.xml # Mapper映射文件的位置
  type-aliases-package: com.example.his.api.db.pojo # pojo的路径
  configuration:
    # 输出执行的SQL语句
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    map-underscore-to-camel-case: true # 支持驼峰命名法

# 日志配置
logging:
  level:
    # SpringBoot 日志级别
    root: info
    # MyBatis的日志级别
    com.example.his.api.db.mapper: warn
  # 日志输出格式
  pattern:
    console: '%d{yyyy/MM/dd HH:mm:ss}  %-5level  [%thread]  %logger{36}  %msg%n'

# sa-token 配置
sa-token:
  # HTTP请求头中哪个属性用来上传令牌
  token-name: token
  # 过期时间（秒），设置为30天 60 * 60 * 24 * 30
  timeout: 2592000
  # 临时有效期，设置为3天【在第27~30天之间若登录会进行续期】
  active-timeout: 259200
  # 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）
  is-concurrent: false
  # 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）
  is-share: false
  # token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）
  token-style: uuid
  # 是否尝试从 cookie 里读取 Token，此值为 false 后，StpUtil.login(id) 登录时也不会再往前端注入Cookie
  is-read-cookie: false
  # 是否输出操作日志
  is-log: true

# minio 配置信息
minio:
  # 路径地址
  endpoint: http://localhost:9000
  # 账号
  access-key: root
  # 密码
  secret-key: abc123456
  # 桶名
  bucket: his